{"version":3,"sources":["components/Holiday/HolidayViewSearch.js","components/Nav/Banner.js","App.js","serviceWorker.js","index.js"],"names":["HolidayViewSearch","state","className","Card","Header","Body","Form","Group","as","Row","controlId","Col","sm","Control","type","placeholder","ButtonToolbar","Button","variant","keyField","data","columns","dataField","text","selectRow","mode","clickToSelectAndEditCell","cellEdit","cellEditFactory","blurToSave","Component","Banner","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAiFeA,E,YA3EX,aAAe,IAAD,8BACV,+CACKC,MAAQ,GAFH,E,sEAiCV,OACI,yBAAKC,UAAU,QACX,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,8BACA,kBAACD,EAAA,EAAKE,KAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACN,EAAA,EAAKO,QAAN,CAAcC,KAAK,OAAOC,YAAY,eAG9C,kBAACT,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACN,EAAA,EAAKO,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBAG9C,kBAACT,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,cAOhB,yBAAKhB,UAAU,QACX,kBAAC,IAAD,CACIiB,SAAS,WACTC,KAlCT,GAmCSC,QAzDR,CACZ,CACIC,UAAW,WACXC,KAAM,aAEV,CACID,UAAW,eACXC,KAAM,YAEV,CACID,UAAW,YACXC,KAAM,WA+CUC,UA3CN,CACdC,KAAM,WAENC,0BAA0B,GAyCNC,SAAUC,IAAgB,CAAEH,KAAM,UAAWI,YAAY,c,GAlEzDC,a,2BCkBjBC,E,iLAjBP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,QACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKvC,UAAU,WAEX,kBAACuC,EAAA,EAAIC,KAAL,CAAUN,KAAK,KAAf,yB,GAVPN,aCuBNa,MArBf,WACI,OACI,yBAAKzC,UAAU,OACX,kBAAC,EAAD,MAWA,kBAAC0C,EAAA,EAAD,KACI,kBAAC,EAAD,SCTIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6037b013.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, ButtonToolbar, Card, Form, Row, Col } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass HolidayViewSearch extends Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n\n    render() {\n        const columns = [\n            {\n                dataField: 'cityname',\n                text: 'City/Town'\n            },\n            {\n                dataField: 'provincename',\n                text: 'Province'\n            },\n            {\n                dataField: 'regioname',\n                text: 'Region'\n            } \n        ]\n\n        const selectRow = {\n            mode: 'checkbox',\n            //clickToSelect: true,\n            clickToSelectAndEditCell: true\n        };\n\n         \n        const cities = [\n            /* {\"cityname\" : \"Quezon City\", \"provincename\" : \"NCR\", \"regioname\" : \"NCR\"},\n            {\"cityname\" : \"Laoag City\", \"provincename\" : \"Ilocos Norte\", \"regioname\" : \"Region 1\"},\n            {\"cityname\" : \"Bacolod City\", \"provincename\" : \"Negros Occ\", \"regioname\" : \"Region 7\"} */\n        ]\n        return (\n            <div className=\"mt-5\">\n                <Card>\n                    <Card.Header>Holiday View / Search</Card.Header>\n                    <Card.Body>\n                        <Form>\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                                <Col sm={12}>\n                                    <Form.Control type=\"text\" placeholder=\"Province\" />\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                                <Col sm={12}>\n                                    <Form.Control type=\"text\" placeholder=\"City/Town\" />\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                                <Col sm={12}>\n                                    <ButtonToolbar>\n                                        <Button variant=\"primary\">\n                                            Search\n                                        </Button>\n                                    </ButtonToolbar>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                        <div className=\"mt-5\">\n                            <BootstrapTable\n                                keyField=\"cityname\"\n                                data={cities}\n                                columns={columns}\n                                selectRow={selectRow}\n                                cellEdit={cellEditFactory({ mode: \"dbclick\", blurToSave: true })}\n                            />\n                        </div>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default HolidayViewSearch;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { Component } from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nclass Banner extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">HRIS</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            {/* <NavLink to=\"/WorkScheduleView\">Work Schedule</NavLink> */}\n                            <Nav.Link href=\"#\">Work Schedule</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default Banner;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport \"./App.css\";\nimport HolidayViewSearch from \"./components/Holiday/HolidayViewSearch\";\nimport Banner from \"./components/Nav/Banner\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Banner />\n\n            {/* <Switch>\n                    <Route path=\"/WorkScheduleView\" component={WorkScheduleView} />\n                </Switch> */}\n            {/*\n                    <WorkScheduleView />\n                    <GridBootStrap />\n                    <BootStrapGrid1 />\n                    */}\n\n            <Container>\n                <HolidayViewSearch />\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}